"use strict";(self.webpackChunkhab_guide=self.webpackChunkhab_guide||[]).push([[2636],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=o,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||r;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},92:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:3},i="Control Prep",s={unversionedId:"l1-hosts/control-prep",id:"l1-hosts/control-prep",title:"Control Prep",description:"We now have the previously outlined software installed on the control computer",source:"@site/docs/l1-hosts/control-prep.md",sourceDirName:"l1-hosts",slug:"/l1-hosts/control-prep",permalink:"/hab-guide/docs/l1-hosts/control-prep",draft:!1,editUrl:"https://github.com/GildedPleb/hab-guide/edit/master/website/docs/l1-hosts/control-prep.md",tags:[],version:"current",lastUpdatedBy:"GildedPleb",lastUpdatedAt:1672988373,formattedLastUpdatedAt:"Jan 6, 2023",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Software Requirements",permalink:"/hab-guide/docs/l1-hosts/software"},next:{title:"Host Naming",permalink:"/hab-guide/docs/l1-hosts/host-naming"}},l={},p=[{value:"Control Computer System Prep",id:"control-computer-system-prep",level:2},{value:"Indempotent-ness",id:"indempotent-ness",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"control-prep"},"Control Prep"),(0,o.kt)("p",null,"We now have the previously outlined software installed on the control computer\nand will begin using it to build out the interface needed to manage a HAB Node."),(0,o.kt)("h2",{id:"control-computer-system-prep"},"Control Computer System Prep"),(0,o.kt)("p",null,"Most of the commands in this guide will start with ",(0,o.kt)("inlineCode",{parentName:"p"},"ansible-playbook")," so for the\nsake of sanity, we will add an ",(0,o.kt)("inlineCode",{parentName:"p"},"alias"),", so we don't have to type that all out\nbut instead just type ",(0,o.kt)("inlineCode",{parentName:"p"},"apb"),"."),(0,o.kt)("p",null,'The following commands write an alias to the end of your rc file. What is the rc\nfile? "rc" stands for\n"',(0,o.kt)("a",{parentName:"p",href:"https://unix.stackexchange.com/questions/3467/what-does-rc-in-bashrc-stand-for"},"run command"),'".\nIt is a list of commands that are run every time we open up a new terminal. In\nour case, every time we open a new terminal, we want to be able to not type\n',(0,o.kt)("inlineCode",{parentName:"p"},"ansible-playbook")," but instead type ",(0,o.kt)("inlineCode",{parentName:"p"},"apb"),". You can find out which command to run\n(and thus which rc file is important) by using the command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"echo $0\n")),(0,o.kt)("p",null,"if it returns ",(0,o.kt)("inlineCode",{parentName:"p"},"zsh"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'alias apb=\"ansible-playbook\"' >> ~/.zshrc && source ~/.zshrc\n")),(0,o.kt)("p",null,"or if ",(0,o.kt)("inlineCode",{parentName:"p"},"bash"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'alias apb=\"ansible-playbook\"' >> ~/.bashrc && source ~/.bashrc\n")),(0,o.kt)("p",null,"We will also be using Ansible-Vault to store secrets for our cluster. For this,\nwe will need a vault password which we will store in an executable clear text\nfile. This isn't secure. But, it gives us good options for later. Like changing\nthe executable script from echoing the password to a script which calls the\npassword from Bitwarden, or asks for user input."),(0,o.kt)("p",null,"To add this Ansible Vault password, run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir ~/.HAB && echo '#!/bin/sh\\n\\necho '\"\\\"$(/usr/bin/openssl rand -base64 63 | tr -d '\\n')\\\"\" > ~/.HAB/.ansible_vault_access && chmod +x ~/.HAB/.ansible_vault_access\n")),(0,o.kt)("p",null,"What is this doing?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir ~/.HAB        # make a new directory in the root user file called .HAB\n&&                  # then perform a entirely separate second command\necho '\n        #!/bin/sh\\n\n        \\n\n        echo\n    ' # write these exact three above lines to stdout, then write the below computed output to standard out:\n    \"\n        \\\"\n            $(\n                /usr/bin/openssl rand -base64 63 | tr -d '\\n'  # get a new random string of 63 length, remove the new lines in it and write that to stdout\n            )\n        \\\"\n    \"\n> ~/.HAB/.ansible_vault_access            # take all the stdout output from above and write it to a file in your home directory\n&&                                  # then perform a entirely separate third command\nchmod +x ~/.HAB/.ansible_vault_access     # make that file an executable file\n")),(0,o.kt)("h2",{id:"indempotent-ness"},"Indempotent-ness"),(0,o.kt)("p",null,"Because this newly created file is an executable, to view the password you have\njust created you can run ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.HAB/.ansible_vault_access"),", and it will print that\npassword to the terminal. Do that now to make sure everything took."),(0,o.kt)("p",null,"If you see your newly generated random password, Congrats! However, there is a\nnew problem: You now have your password printed in your terminal and should\nconsider that password burned."),(0,o.kt)("p",null,"It's time you get a new password. Run the super long command above again,\nwithout altering it. What happened?"),(0,o.kt)("p",null,"You should see the error:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mkdir: /Users/<YOU>/.HAB: File exists\n")),(0,o.kt)("p",null,"The above command (or rather, more specifically, ",(0,o.kt)("inlineCode",{parentName:"p"},"mkdir ~/.HAB"),") is not\nidempotent, meaning, if you run it more than once, you will get different\nresults."),(0,o.kt)("p",null,"We are belaboring this point because it is integral to the entire architecture\nof Ansible and this guide."),(0,o.kt)("p",null,"Ansible is designed from the ground up to be idempotent. Meaning, we should\nexpect to run an Ansible command over and over and get the same results. This is\na big deal because we are not running commands to get results of math equations,\nbut we are running commands to get computers to have a particular set of\nproperties or be in a particular state. In our case, a state that allows a HAB\nnode to function. On top of this, it is important because what if you forget\nyour place or forget if you have run a command or not? Easy, just run it again!\nIf you have run it already, then nothing will happen, and if you have not, it\nwill do what you want."),(0,o.kt)("p",null,"To make the above long command idempotent add a ",(0,o.kt)("inlineCode",{parentName:"p"},"-p")," flag to the ",(0,o.kt)("inlineCode",{parentName:"p"},"mkdir ~/.HAB"),"\nsection, like this, ",(0,o.kt)("inlineCode",{parentName:"p"},"mkdir -p ~/.HAB")," and run the giant command again (the ",(0,o.kt)("inlineCode",{parentName:"p"},"-p"),"\nflag says \"Hey, don't throw an error if this doesn't work\")."),(0,o.kt)("p",null,"You should now have a file with a new and different password. Though it's not\nthe same password, we can now consider our command idempotent for our purposes,\nbecause it is the same output: a cryptographically secure random, base64\nencoded, 63 bytes of entropy password. AKA a needlessly strong password."),(0,o.kt)("p",null,"To view this new password and confirm that it is indeed new, without printing to\nterminal, run ",(0,o.kt)("inlineCode",{parentName:"p"},"nano ~/.HAB/.ansible_vault_access")))}d.isMDXComponent=!0}}]);